# -*- coding: utf-8 -*-
"""Car Price Prediction with Machine Learning

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1675_q1YLXDmEiPzgFErZRv8IqUPfj1R7
"""

# Importing necessary libraries
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

data = pd.read_csv('car data.csv')

print(data.head(5))

print("\nDataset Information:")
print(data.info())

# Checking for missing values
print("\nMissing Values:")
print(data.isnull().sum())

# Statistical summary of numerical columns
print("\nStatistical Summary:")
print(data.describe())

plt.figure(figsize=(8, 6))
sns.histplot(data['Selling_Price'], kde=True, bins=30, color='blue')
plt.title('Distribution of Selling Price')
plt.xlabel('Selling Price (in lakhs)')
plt.ylabel('Frequency')
plt.show()

# Correlation heatmap to understand relationships between numerical features
plt.figure(figsize=(10, 8))
# Select only numerical features for correlation calculation
numerical_data = data.select_dtypes(include=np.number)
sns.heatmap(numerical_data.corr(), annot=True, cmap='coolwarm', fmt='.2f')
plt.title('Correlation Heatmap')
plt.show()

#Dropping irrelevant columns (like Car_Name) as they don't contribute to the model
data.drop(columns=['Car_Name'], inplace=True)

# Encoding categorical variables
data['Fuel_Type'] = data['Fuel_Type'].map({'Petrol': 0, 'Diesel': 1, 'CNG': 2})
data['Selling_type'] = data['Selling_type'].map({'Dealer': 0, 'Individual': 1})
data['Transmission'] = data['Transmission'].map({'Manual': 0, 'Automatic': 1})

# Splitting the data into features (X) and target variable (y)
X = data.drop(columns=['Selling_Price'])
y = data['Selling_Price']

# Splitting the data into training and testing sets
from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

print("\nTraining and Testing Data Shapes:")
print(f"X_train: {X_train.shape}, X_test: {X_test.shape}")
print(f"y_train: {y_train.shape}, y_test: {y_test.shape}")

# Importing regression models
from sklearn.linear_model import LinearRegression
from sklearn.ensemble import RandomForestRegressor
from sklearn.metrics import mean_squared_error, r2_score

# Initializing and training a Linear Regression model
lr_model = LinearRegression()
lr_model.fit(X_train, y_train)

# Predicting on the test set
y_pred_lr = lr_model.predict(X_test)

# Evaluating the Linear Regression model
mse_lr = mean_squared_error(y_test, y_pred_lr)
r2_lr = r2_score(y_test, y_pred_lr)
print("\nLinear Regression Performance:")
print(f"MSE: {mse_lr:.2f}, R2 Score: {r2_lr:.2f}")

# Initializing and training a Random Forest Regressor
rf_model = RandomForestRegressor(n_estimators=100, random_state=42)
rf_model.fit(X_train, y_train)

# Predicting on the test set
y_pred_rf = rf_model.predict(X_test)

# Evaluating the Random Forest model
mse_rf = mean_squared_error(y_test, y_pred_rf)
r2_rf = r2_score(y_test, y_pred_rf)
print("\nRandom Forest Performance:")
print(f"MSE: {mse_rf:.2f}, R2 Score: {r2_rf:.2f}")

# Extracting feature importance from the Random Forest model
feature_importances = rf_model.feature_importances_
features = X.columns

# Creating a DataFrame for better visualization
importance_df = pd.DataFrame({'Feature': features, 'Importance': feature_importances})
importance_df = importance_df.sort_values(by='Importance', ascending=False)

# Plotting feature importance
plt.figure(figsize=(10, 6))
sns.barplot(x='Importance', y='Feature', data=importance_df, palette='viridis')
plt.title('Feature Importance from Random Forest')
plt.show()

# Saving the Random Forest model as it performed better
import joblib
joblib.dump(rf_model, 'car_price_prediction_model.pkl')

print("\nModel saved successfully!")

# Loading the saved model
loaded_model = joblib.load('car_price_prediction_model.pkl')

# Example input for prediction (update values as needed)
example_input = [[2015, 9.85, 20000, 1, 0, 0, 0]]  # [Year, Present_Price, Driven_kms, Fuel_Type, Selling_type, Transmission, Owner]

# Making a prediction
predicted_price = loaded_model.predict(example_input)
print(f"\nPredicted Selling Price: {predicted_price[0]:.2f} lakhs")